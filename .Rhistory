donnees_simulees_list[[i]] <- donnees_sim
}
# Combinaison des simulations en un seul dataframe
donnees_simulees <- do.call(rbind, donnees_simulees_list)
# Visualisation si demandée
if(plot_results) {
# Création d'une palette de couleurs adaptée au nombre d'états
etat_palette <- brewer.pal(max(3, nb_etats), "Set1")
if(nb_etats > 9) {
# Interpolation si plus de 9 états
etat_palette <- colorRampPalette(etat_palette)(nb_etats)
}
names(etat_palette) <- as.character(1:nb_etats)
# Visualisation des données originales avec états prédits
p1 <- ggplot(donnees, aes(x = time, y = factor(etat), color = factor(etat))) +
geom_point(size = 3) +
scale_color_manual(values = etat_palette) +
labs(title = "États cachés prédits (données originales)",
x = "time", y = "État", color = "État") +
theme_minimal()
p2 <- ggplot(donnees, aes(x = time, y = death, color = factor(etat))) +
geom_line() +
geom_point(size = 2) +
scale_color_manual(values = etat_palette) +
labs(title = "Décès par état (données originales)",
x = "Time", y = "Nombre de décès", color = "État") +
theme_minimal()
p3 <- ggplot(donnees, aes(x = time, y = temp, color = factor(etat))) +
geom_line() +
geom_point(size = 2) +
scale_color_manual(values = etat_palette) +
labs(title = "Température par état (données originales)",
x = "Time", y = "Température (°C)", color = "État") +
theme_minimal()
# Visualisation des données simulées (première simulation)
sim1 <- subset(donnees_simulees, simulation_id == 1)
p4 <- ggplot(sim1, aes(x = time, y = factor(etat), color = factor(etat))) +
geom_point(size = 3) +
scale_color_manual(values = etat_palette) +
labs(title = "États cachés simulés",
x = "time", y = "État", color = "État") +
theme_minimal()
p5 <- ggplot(sim1, aes(x = time, y = death, color = factor(etat))) +
geom_line() +
geom_point(size = 2) +
scale_color_manual(values = etat_palette) +
labs(title = "Décès simulés",
x = "time", y = "Nombre de décès", color = "État") +
theme_minimal()
p6 <- ggplot(sim1, aes(x = time, y = temp, color = factor(etat))) +
geom_line() +
geom_point(size = 2) +
scale_color_manual(values = etat_palette) +
labs(title = "Température simulée",
x = "time", y = "Température (°C)", color = "État") +
theme_minimal()
# Comparaison entre réel et simulé
donnees$type <- "Réel"
sim1$type <- "Simulé"
donnees_comparaison <- rbind(
donnees[, c("time", "death", "temp", "type")],
sim1[, c("time", "death", "temp", "type")]
)
p7 <- ggplot(donnees_comparaison, aes(x = time, y = death, color = type)) +
geom_line() +
geom_point(size = 2) +
facet_wrap(~type) +
labs(title = "Comparaison des décès: réel vs simulé",
x = "time", y = "Nombre de décès", color = "Type de données") +
theme_minimal()
p8 <- ggplot(donnees_comparaison, aes(x = time, y = temp, color = type)) +
geom_line() +
geom_point(size = 2) +
facet_wrap(~type) +
labs(title = "Comparaison des températures: réel vs simulé",
x = "time", y = "Température (°C)", color = "Type de données") +
theme_minimal()
# Distributions des valeurs par état
y_limits <- range(c(donnees$death, sim1$death))
p9 <- ggplot(donnees, aes(x = factor(etat), y = death, fill = factor(etat))) +
geom_boxplot() +
scale_fill_manual(values = etat_palette) +
labs(title = "Distribution des décès par état (données réelles)",
x = "État", y = "Nombre de décès", fill = "État") +
theme_minimal() +
ylim(y_limits)
p10 <- ggplot(sim1, aes(x = factor(etat), y = death, fill = factor(etat))) +
geom_boxplot() +
scale_fill_manual(values = etat_palette) +
labs(title = "Distribution des décès par état (données simulées)",
x = "État", y = "Nombre de décès", fill = "État") +
theme_minimal() +
ylim(y_limits)
# Affichage des graphiques en grille
cat("Affichage des visualisations...\n")
grid.arrange(p1, p2, p3, ncol = 1)
grid.arrange(p4, p5, p6, ncol = 1)
#grid.newpage()
grid.arrange(p7, p8, ncol = 2)
#grid.newpage()
grid.arrange(p9, p10, ncol = 2)
# Si plusieurs simulations, visualiser la variabilité
if(n_simulations > 1) {
p_var <- ggplot(donnees_simulees, aes(x = time, y = death, group = interaction(simulation_id, etat),
color = factor(etat))) +
geom_line(alpha = 0.3) +
scale_color_manual(values = etat_palette) +
labs(title = paste("Variabilité sur", n_simulations, "simulations"),
x = "time", y = "Nombre de décès", color = "État") +
theme_minimal()
print(p_var)
}
}
# Retour des résultats
resultats <- list(
modele_original = modele_hmm,
modele_ajuste = modele_ajuste,
donnees_avec_etats = donnees,
donnees_simulees = donnees_simulees,
log_likelihood = logLik(modele_ajuste),
BIC = BIC(modele_ajuste),
AIC = AIC(modele_ajuste)
)
return(resultats)
}
#------------------------------------------------
# EXEMPLE D'UTILISATION
#------------------------------------------------
# Comparaison de modèles avec différents nombres d'états
comparer_modeles <- function(donnees, max_etats = 4) {
resultats_comparaison <- data.frame(
nb_etats = 2:max_etats,
logLik = NA,
AIC = NA,
BIC = NA,
degree_of_freedom = NA,
LRT_p_value = NA
)
for(i in 2:max_etats) {
cat(paste("\n\n===== MODÈLE À", i, "ÉTATS =====\n\n"))
res <- estimer_simuler_hmm(donnees, nb_etats = i, plot_results = FALSE)
resultats_comparaison$logLik[i-1] <- res$log_likelihood[1]
resultats_comparaison$AIC[i-1] <- res$AIC
resultats_comparaison$BIC[i-1] <- res$BIC
resultats_comparaison$degree_of_freedom[i-1] <- attr(logLik(res$modele_ajuste), "df")
}
# Calcul du test du rapport de vraisemblance (LRT)
for(i in 2:max_etats) {
lrt_stat <- 2 * (resultats_comparaison$logLik[i] - resultats_comparaison$logLik[i-1])
lrt_df <- resultats_comparaison$degree_of_freedom[i] - resultats_comparaison$degree_of_freedom[i-1]
lrt_p_value <- 1 - pchisq(lrt_stat, lrt_df)
resultats_comparaison$LRT_p_value[i-1] <- lrt_p_value
}
# Graphiques de comparaison
p1 <- ggplot(resultats_comparaison, aes(x = nb_etats, y = AIC)) +
geom_line() +
geom_point(size = 3) +
labs(title = "Comparaison des modèles: AIC",
x = "Nombre d'états", y = "AIC (plus petit = meilleur)") +
theme_minimal()
p2 <- ggplot(resultats_comparaison, aes(x = nb_etats, y = BIC)) +
geom_line() +
geom_point(size = 3) +
labs(title = "Comparaison des modèles: BIC",
x = "Nombre d'états", y = "BIC (plus petit = meilleur)") +
theme_minimal()
grid.arrange(p1, p2, ncol = 2)
return(resultats_comparaison)
}
# Exemple d'utilisation:
# 1. Comparer différents nombres d'états
resultats_comparaison <- comparer_modeles(df, max_etats = 3)
# print(resultats_comparaison)
# 2. Modèle avec nombre d'états spécifique (par exemple, le meilleur selon BIC)
resultats <- estimer_simuler_hmm(df, nb_etats = 2, n_simulations = 1, plot_results = TRUE)
resultats <- estimer_simuler_hmm(df, nb_etats = 2, n_simulations = 1, plot_results = TRUE)
resultats <- estimer_simuler_hmm(df, nb_etats = 4, n_simulations = 2, plot_results = TRUE)
library(depmixS4)
library(methods)
# Définition de la période pour les composantes périodiques
period <- 100
# Définir une classe pour la distribution Poisson avec tendance
setClass("poissonTrend",
contains = "response",
slots = list(a = "numeric", E = "numeric"))
# Constructeur générique pour Poisson avec tendance
setGeneric("poissonTrend",
function(y, a, E, pstart = NULL, fixed = NULL, ...)
standardGeneric("poissonTrend"))
setMethod("poissonTrend", signature(y = "ANY"),
function(y, a, E, pstart = NULL, fixed = NULL, ...) {
y <- matrix(y, length(y))
x <- matrix(1:length(y), ncol = 1)
parameters <- list()
npar <- 4  # lambda_k, gamma_k1, gamma_k2, alpha_k
if (is.null(fixed)) fixed <- rep(FALSE, npar)
if (is.null(pstart)) {
# Valeurs par défaut si pstart n'est pas fourni
pstart <- c(mean(y), 0, 0, 0)
}
if (length(pstart) != npar)
stop("length of 'pstart' must be ", npar)
parameters$lambda <- pstart[1]
parameters$gamma1 <- pstart[2]
parameters$gamma2 <- pstart[3]
parameters$alpha <- pstart[4]
mod <- new("poissonTrend",
parameters = parameters,
fixed = fixed,
x = x,
y = y,
a = a,
E = E,
npar = npar)
mod
})
# Méthode de densité pour Poisson avec tendance avec E comme offset
setMethod("dens", "poissonTrend", function(object, log = FALSE) {
lambda <- object@parameters$lambda +
object@parameters$gamma1 * cos(2 * pi * object@x / period) +
object@parameters$gamma2 * sin(2 * pi * object@x / period) +
object@parameters$alpha * object@a
# Utiliser dpois pour calculer la densité avec E comme offset
dpois(object@y, lambda = lambda * object@E, log = log)
})
# Wrapper pour la distribution
poissonTrendWrapper <- function(y, a, E) {
list(family = "poisson", response = poissonTrend(y, a, E))
}
# Exemple d'utilisation
set.seed(123)
time <- 1:100
a <- 0.05 * time  # Tendance linéaire
E <- rep(10, 100)  # Offset/exposition constante
y1 <- rpois(100, lambda = (10 + 0.05 * time) * E)  # Générer des données avec offset
data <- data.frame(y1 = y1)
# Définir un modèle HMM univarié
mod <- depmix(y1 ~ 1,
data = data,
nstates = 2,
family = poissonTrendWrapper(data$y1, a, E))
library(depmixS4)
library(methods)
# Définition de la période pour les composantes périodiques
period <- 100
# Définir une classe pour la distribution Poisson avec tendance
setClass("poissonTrend",
contains = "response",
slots = list(a = "numeric", E = "numeric"))
# Constructeur générique pour Poisson avec tendance
setGeneric("poissonTrend",
function(y, a, E, pstart = NULL, fixed = NULL, ...)
standardGeneric("poissonTrend"))
setMethod("poissonTrend", signature(y = "ANY"),
function(y, a, E, pstart = NULL, fixed = NULL, ...) {
y <- matrix(y, length(y))
x <- matrix(1:length(y), ncol = 1)
parameters <- list()
npar <- 4  # lambda_k, gamma_k1, gamma_k2, alpha_k
if (is.null(fixed)) fixed <- rep(FALSE, npar)
if (is.null(pstart)) {
# Valeurs par défaut si pstart n'est pas fourni
pstart <- c(mean(y), 0, 0, 0)
}
if (length(pstart) != npar)
stop("length of 'pstart' must be ", npar)
parameters$lambda <- pstart[1]
parameters$gamma1 <- pstart[2]
parameters$gamma2 <- pstart[3]
parameters$alpha <- pstart[4]
mod <- new("poissonTrend",
parameters = parameters,
fixed = fixed,
x = x,
y = y,
a = a,
E = E,
npar = npar)
mod
})
# Méthode de densité pour Poisson avec tendance avec E comme offset
setMethod("dens", "poissonTrend", function(object, log = FALSE) {
lambda <- object@parameters$lambda +
object@parameters$gamma1 * cos(2 * pi * object@x / period) +
object@parameters$gamma2 * sin(2 * pi * object@x / period) +
object@parameters$alpha * object@a
# Utiliser dpois pour calculer la densité avec E comme offset
dpois(object@y, lambda = lambda * object@E, log = log)
})
# Wrapper pour la distribution
poissonTrendWrapper <- function(y, a, E) {
list(family = "poisson", response = poissonTrend(y, a, E))
}
# Exemple d'utilisation
set.seed(123)
time <- 1:100
a <- 0.05 * time  # Tendance linéaire
E <- rep(10, 100)  # Offset/exposition constante
y1 <- rpois(100, lambda = (10 + 0.05 * time) * E)  # Générer des données avec offset
data <- data.frame(y1 = y1)
# Définir un modèle HMM univarié
mod <- depmix(y1 ~ 1,
data = data,
nstates = 2,
family = poissonTrendWrapper(data$y1, a, E))
data
mod <- depmix(y1 ~ 1,
data = data,
nstates = 2,
family = poissonTrendWrapper(data$y1, a, E))
poissonTrendWrapper <- function(y, a, E) {
list(family = "poisson", response = poissonTrend(y, a, E))
}
mod <- depmix(y1 ~ 1,
data = data,
nstates = 2,
family = poissonTrendWrapper(data$y1, a, E))
library(depmixS4)
library(methods)
mod <- depmix(y1 ~ 1,
data = data,
nstates = 2,
family = poissonTrendWrapper(data$y1, a, E))
summary(custom_fit, which = 'response')
# Libraries
library(depmixS4)
library(tidyverse)
library(ggplot2)
library(readxl)
library(gridExtra)
library(stats)
set.seed(123)
states <- 2
degree_obs_pol <- 1
degree_trans_pol <- 1
period <- 52
# Lecture des données depuis un fichier Excel
data <- read_excel("main_database.xlsx", sheet = "database")
df = data.frame(
obs_poisson = data$Death_counts,
obs_normal = data$Temperature,
rate = data$Death_counts / data$Weekly_exposure,
log_exposure = log(data$Weekly_exposure),
exposure = data$Weekly_exposure,
trend = data$No_year)
# Prétraitement des données
df <- df %>%
mutate(
time = data$No_week,
cos_1 = cos(2 * pi * time / 52.18),
sin_1 = sin(2 * pi * time / 52.18),
) %>%
drop_na() %>%
filter_all(all_vars(is.finite(.)))
# Vérification des colonnes requises
required_cols <- c("obs_poisson", "obs_normal", "trend", "cos_1", "sin_1", "exposure")
missing_cols <- setdiff(required_cols, names(df))
if (length(missing_cols) > 0) stop("Colonnes manquantes : ", paste(missing_cols, collapse = ", "))
build_hmm_with_exposure <- function(data, K = 2, period = 52) {
# Liste pour stocker les composantes de réponse pour chaque état
resp_list <- list()
# Modèle pour la composante Poisson (mortalité) avec l'exposition comme offset
for (k in 1:K) {
pstart_poisson <- c(
lambda = -5.5 - 0.5 * (k-1),
alpha = 0.01 + 0.01 * (k-1),
gamma_cos = 0.2 + 0.1 * (k-1),
gamma_sin = 0.1 + 0.05 * (k-1)
)
# Ajout de l'exposition comme offset dans le modèle Poisson
mod_mort <- GLMresponse(
obs_poisson ~ trend + cos_1 + sin_1,  # Formule avec covariables
data = data,
family = poisson(link = "log"),
pstart = pstart_poisson,
offset = log(data$exposure)  # L'exposition est incluse comme offset
)
resp_list[[k]] <- mod_mort
}
# Modèle pour la composante température (approche alternative)
for (k in 1:K) {
pstart_temp <- c(
intercept = 15 - 5 * (k - 1),     # Intercept différent par état
trend = 0.05 - 0.02 * (k - 1),    # Coeff du trend
sin = 8 + 2 * (k - 1),            # Saisonnalité sin
cos = 2 + (k - 1),                # Saisonnalité cos
sd = 2 + (k*0.5)                  # Ecart-type
)
mod_temp <- GLMresponse(
obs_normal ~ trend + sin_1 + cos_1,
data = data,
family = gaussian(),
pstart = pstart_temp
)
resp_list[[k]] <- c(resp_list[[k]], mod_temp)
}
# Paramètres de transition initiaux
trstart <- matrix(c(0.95, 0.05, 0.05, 0.95), nrow = K)
# Probabilités initiales
instart <- rep(1/K, K)
# Formule de transition (simplifiée)
tr_formula <- ~ cos_1 + sin_1
# Créer le modèle HMM
mod <- makeDepmix(
response = resp_list,          # Liste de modèles pour chaque état
transition = list(tr_formula), # Formule de transition
prior = ~1,                    # Probabilité initiale
homogeneous = FALSE,           # Transitions non-homogènes
data = data,
nstates = K,
trstart = trstart,
instart = instart
)
return(mod)
}
custom_mod <- build_hmm_with_exposure(df, K = states)
# Libraries
library(depmixS4)
library(tidyverse)
library(ggplot2)
library(readxl)
library(gridExtra)
library(stats)
set.seed(123)
states <- 2
degree_obs_pol <- 1
degree_trans_pol <- 1
period <- 52
# Lecture des données depuis un fichier Excel
data <- read_excel("main_database.xlsx", sheet = "database")
df = data.frame(
obs_poisson = data$Death_counts,
obs_normal = data$Temperature,
rate = data$Death_counts / data$Weekly_exposure,
log_exposure = log(data$Weekly_exposure),
exposure = data$Weekly_exposure,
trend = data$No_year)
# Prétraitement des données
df <- df %>%
mutate(
time = data$No_week,
cos_1 = cos(2 * pi * time / 52.18),
sin_1 = sin(2 * pi * time / 52.18),
) %>%
drop_na() %>%
filter_all(all_vars(is.finite(.)))
# Vérification des colonnes requises
required_cols <- c("obs_poisson", "obs_normal", "trend", "cos_1", "sin_1", "exposure")
missing_cols <- setdiff(required_cols, names(df))
if (length(missing_cols) > 0) stop("Colonnes manquantes : ", paste(missing_cols, collapse = ", "))
build_hmm_with_exposure <- function(data, K = 2, period = 52) {
# Liste pour stocker les composantes de réponse pour chaque état
resp_list <- list()
# Modèle pour la composante Poisson (mortalité) avec l'exposition comme offset
for (k in 1:K) {
pstart_poisson <- c(
lambda = -5.5 - 0.5 * (k-1),
alpha = 0.01 + 0.01 * (k-1),
gamma_cos = 0.2 + 0.1 * (k-1),
gamma_sin = 0.1 + 0.05 * (k-1)
)
# Ajout de l'exposition comme offset dans le modèle Poisson
mod_mort <- GLMresponse(
obs_poisson ~ trend + cos_1 + sin_1,  # Formule avec covariables
data = data,
family = poisson(link = "log"),
pstart = pstart_poisson,
offset = log(data$exposure)  # L'exposition est incluse comme offset
)
resp_list[[k]] <- mod_mort
}
# Modèle pour la composante température (approche alternative)
for (k in 1:K) {
pstart_temp <- c(
intercept = 15 - 5 * (k - 1),     # Intercept différent par état
trend = 0.05 - 0.02 * (k - 1),    # Coeff du trend
sin = 8 + 2 * (k - 1),            # Saisonnalité sin
cos = 2 + (k - 1),                # Saisonnalité cos
sd = 2 + (k*0.5)                  # Ecart-type
)
mod_temp <- GLMresponse(
obs_normal ~ trend + sin_1 + cos_1,
data = data,
family = gaussian(),
pstart = pstart_temp
)
resp_list[[k]] <- c(resp_list[[k]], mod_temp)
}
# Paramètres de transition initiaux
trstart <- matrix(c(0.95, 0.05, 0.05, 0.95), nrow = K)
# Probabilités initiales
instart <- rep(1/K, K)
# Formule de transition (simplifiée)
tr_formula <- ~ cos_1 + sin_1
# Créer le modèle HMM
mod <- makeDepmix(
response = resp_list,          # Liste de modèles pour chaque état
transition = list(tr_formula), # Formule de transition
prior = ~1,                    # Probabilité initiale
homogeneous = FALSE,           # Transitions non-homogènes
data = data,
nstates = K,
trstart = trstart,
instart = instart
)
return(mod)
}
custom_mod <- build_hmm_with_exposure(df, K = states)
fit_start_time <- Sys.time()
custom_fit <- fit(custom_mod, verbose = TRUE, emc = em.control(maxit = 500, tol = 1e-08))
fit_end_time <- Sys.time()
cat("Temps d'ajustement du modèle:", difftime(fit_end_time, fit_start_time, units = "mins"), "minutes\n")
